Lintcode387. The Smallest Difference
Given two array of integers(the first array is array A, the second array is array B), now we are going to find a element in array A which is A[i], and another element in array B which is B[j], so that the difference between A[i] and B[j] (|A[i] - B[j]|) is as small as possible, return their smallest difference. 
For example, given array A = [3,6,7,4], B = [2,8,9,3], return 0
O(n log n) time
#Sort and Binary insertion, Python
class Solution:
    # @param A, B: Two lists of integer
    # @return: An integer
    def smallestDifference(self, A, B):
        A.sort()
        B.sort()
        n,m=len(A),len(B)
        dif,s,e=float('Inf'),0,m-1
        mid=(s+e)/2
        for i in range(n):
            if A[i]==B[s] or A[i]==B[e]:
                return 0
            elif A[i]<B[s]:
                dif=min(dif, B[s]-A[i])
            elif A[i]>B[e]:
                dif=min(dif, A[i]-B[e])
            else:
                while e>=s:
                    mid=(e+s)/2
                    if A[i]==B[mid]:
                        return 0
                    elif A[i]>B[mid]:
                        s=mid+1
                    elif A[i]<B[mid]:
                        e=mid-1
                dif,s,e=min(dif, A[i]-B[s-1],B[s]-A[i]),s-1,m-1
        return dif
#Sort and comparing, C++
class Solution {
public:    
    int smallestDifference(vector<int> &A, vector<int> &B) {
        sort(A.begin(),A.end());
        sort(B.begin(),B.end());
        int i=0; int j=0; int dif=pow(2,31)-1;
        while(i<A.size()&&j<B.size()){
            if(A[i]>=B[j]){
                dif=(dif>(A[i]-B[j])?(A[i]-B[j]):dif); j++;}
            else{dif=(dif>(B[j]-A[i])?(B[j]-A[i]):dif);i++;}
                if(dif==0) return 0;
        }return dif;}
};
