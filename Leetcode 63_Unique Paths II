Leetcode 62. Unique Paths
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?
class Solution:
    def uniquePaths(self, m, n):
        def fact(k):
            if k==0:
                return 1
            pdt=1
            for i in range(1,k+1):
                pdt*=i
            return pdt
        return fact(n+m-2)/fact(m-1)/fact(n-1)
Leetcode 63. Unique Paths II
Follow up for "Unique Paths":
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.
For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.
Note: m and n will be at most 100.
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<int> r (n+1,0);
        r[n-1]=1;
        for(int i=m-1;i>-1;i--){
            for(int j=n-1;j>-1;j--){
                if(obstacleGrid[i][j]==1)r[j]=0;
                else r[j]+=r[j+1];
            }
        }return r[0]; }
};
